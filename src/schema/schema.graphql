# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddCommentRequestType {
  contents: String!
  parentPost: String!
  secret: Boolean!
}

input AddMessageRequestType {
  sendUser: String!
  userId: String!
  title: String!
  contents: String!
  sendUserName: String!
  sendUserEmail: String!
}

input AddNotificationRequestType {
  url: String!
  userId: String!
  title: String!
  contents: String!
}

input AddPostRequestType {
  title: String!
  desc: String
  tags: [String!] = []
  contents: String!
  image_url: [String!]
  cover_img: String = ""
  category: String!
  series: String!
}

input AddSeriesRequestType {
  title: String!
  description: String = ""
}

input AddTeamRequestType {
  title: String!
  desc: String!
  category: String!
  location: String!
}

type Category {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  skillset: [SkillSet!]!
  points: Int!
}

type Comment {
  _id: String!
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  contents: String!
  parentPost: Post!
  commentBy: User!
  secret: Boolean!
}

input CuCategoryRequestType {
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input FilterPaginateArgType {
  page: Float!
  limit: Float!
  category: String
  location: String
}

type getAllMessageResponseType {
  lastPage: String!
  docs: [Message!]!
  totalIsView: Int!
}

type GetAllNotificationResponseType {
  lastPage: String!
  docs: [Notification!]!
  totalIsView: Int!
}

type GetAllPostResponseType {
  lastPage: String!
  posts: [Post!]!
}

type GetAllSeriesResponseType {
  lastPage: String!
  series: [Series!]!
}

type GetAllTeamResponseType {
  lastPage: String!
  teams: [Team!]!
}

type GetAllUserResponseType {
  lastPage: String!
  users: [User!]!
}

input LoginRequestType {
  email: String!
  password: String!
}

type LoginResponseType {
  jwt: String!
  user: User!
}

type Message {
  _id: String!
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  title: String!
  contents: String!
  sendUser: String!
  sendUserName: String!
  sendUserEmail: String!
  isView: Boolean!
}

type Mutation {
  login(req: LoginRequestType!): LoginResponseType
  logout: Boolean!
  createComment(data: AddCommentRequestType!): Comment!
  deleteComment(commentId: String!): Comment!
  updateComment(data: UpdateCommentRequestType!): Comment!
  createUser(data: SignupRequestType!): User!
  updateUser(data: UpdateUserRequest!, id: ObjectId!): User!
  deleteUser(id: ObjectId!): String!
  createCategory(data: CuCategoryRequestType!): Category!
  updateCategory(data: CuCategoryRequestType!, id: ObjectId!): Category!
  deleteCategory(id: ObjectId!): String!
  createMessage(data: AddMessageRequestType!): Message!
  updateMessage(data: AddMessageRequestType!, id: ObjectId!): Message!
  deleteMessage(id: ObjectId!): String!
  createNotification(data: AddNotificationRequestType!): Notification!
  updateNotification(data: AddNotificationRequestType!, id: ObjectId!): Notification!
  deleteNotification(id: ObjectId!): String!
  viewMessage(id: ObjectId!): Message!
  updateMessageIsView(id: String!): Message!
  viewNotification(id: ObjectId!): Notification!
  updateNotificationIsView(id: String!): Notification!
  createPost(data: AddPostRequestType!): Post!
  deletePost(postId: String!): Post!
  createSeries(data: AddSeriesRequestType!): Series!
  deleteSeries(seriesId: String!): Series!
  createSkillSet(skill: String!, categoryId: ObjectId!): SkillSet!
  deleteSkillSet(skillSetId: String!): SkillSet!
  createTeam(data: AddTeamRequestType!): Team!
  inviteUserToTeam(teamId: ObjectId!, userId: ObjectId!): Team!
  KickUserOutTeam(teamId: String!, userId: String!): Team!
  addBlackList(teamId: String!, userId: String!): Team!
  addChatData(teamId: ObjectId!, chat: String!): Team!
  uploadProfileImage(file: Upload!): UploadResponseType!
  updateUserPosition(position: [Float!]!): User!
  signup(data: SignupRequestType!): User!
}

type Notification {
  _id: String!
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  title: String!
  contents: String!
  url: String!
  isView: Boolean!
}

"""Bson ObjectId unique identifier (hexadecimal string)."""
scalar ObjectId

input PaginateArgType {
  page: Float!
  limit: Float!
}

type Post {
  _id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  like: Int!
  title: String!
  desc: String!
  contents: String!
  cover_Img: String!
  image_url: [String!]!
  views: Int!
  category: String!
  comments: [Comment!]!
  followUser: [User!]!
  series: Series!
  postedBy: User!
  tags: [String!]!
}

type Query {
  getCurrentUser: User!
  getAllCategory: [Category!]!
  getAllCommentInPost(postId: String!): [Comment!]!
  getUserById(id: ObjectId!): User!
  getCategoryById(id: ObjectId!): Category!
  getMessageById(id: ObjectId!): Message!
  getNotificationById(id: ObjectId!): Notification!
  getAllMessages(page: Int!): getAllMessageResponseType!
  getAllNotifications(page: Int!): GetAllNotificationResponseType!
  getPost(postId: String!): Post!
  getAllPosts(page: Int!): GetAllPostResponseType!
  totalSearchUser(page: Float!, searchWord: String!): GetAllUserResponseType!
  totalSearchPost(page: Float!, searchWord: String!): GetAllPostResponseType!
  totalSearchTeam(page: Float!, searchWord: String!): GetAllTeamResponseType!
  getAllSeries(data: PaginateArgType!): GetAllSeriesResponseType!
  getAllTeam(data: PaginateArgType!): GetAllTeamResponseType!
  getFilterTeam(data: FilterPaginateArgType!): GetAllTeamResponseType!
  getTeamById(teamId: ObjectId!): Team!
  getAllTeamsByMe: [Team!]!
  getAllUser(data: PaginateArgType!): GetAllUserResponseType!
  getAllSeriesByUser: User!
  getAllPostsByUser(page: Int!, userId: String!): User!
  getAllTeamsByUser(page: Int!, userId: String!): User!
  getUsersByTeam(data: PaginateArgType!, id: ObjectId!): [User!]!
  getAllPostsForPostView(userId: String!): User!
  getAllUserBySearch(ableSkillSet: [String!]!, ableLocation: [String!]!): [User!]!
  getNearUsersByMatching(y_pos: Float!, x_pos: Float!, ableSkillSet: [String!]!, ableLocation: [String!]!): [User!]!
  checkUniqueEmail(email: String!): Boolean!
  checkUniqueName(name: String!): Boolean!
}

type Series {
  _id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  posts: [Post!]!
  seriesBy: User!
}

input SignupRequestType {
  email: String!
  password: String!
  name: String!
  gender: String!
  level: [String!]!
  ableLocation: [String!]!
  ableSkillSet: [String!]!
  image_url: String!
}

type SkillSet {
  _id: ObjectId!
  skill: String!
  posts: [Post!]!
  level: Int!
}

type Sns {
  sns: String!
  url: String!
}

type Team {
  _id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  desc: String!
  adminId: String!
  adminName: String!
  adminEmail: String!
  users: [String!]!
  category: String!
  location: String!
  notice: String!
  blackList: [String!]!
  chatData: [String!]!
}

input UpdateCommentRequestType {
  commentId: String!
  contents: String!
  secret: Boolean!
}

input UpdateUserRequest {
  email: String
  password: String
  name: String
  gender: String!
  phone: String
  address: String
  birth: String
  image_url: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadResponseType {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type User {
  _id: String!
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  name: String!
  gender: String!
  image_url: String!
  point: Int!
  level: [String!]!
  check_Found: Boolean!
  comfirmed: Boolean!
  x_pos: Float!
  y_pos: Float!
  favorites: [String!]!
  friendsId: [User!]!
  blackListId: [User!]!
  likePostsId: [User!]!
  posts: [Post!]!
  teams: [Team!]!
  series: [Series!]!
  ableSkillSet: [String!]!
  ableLocation: [String!]!
  sns: [Sns!]!
  messages: [Message!]!
  notifications: [Notification!]!
  jwt: String!
  role: UserRole!
}

"""Identifies user access level"""
enum UserRole {
  Admin
  Guest
  Regular
}
